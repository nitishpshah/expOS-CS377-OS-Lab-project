// load the timer routine into the memory
loadi(4, 17);
loadi(5, 18);

// load the int7 routine into memory
loadi(16, 29);
loadi(17, 30);

// load the int10 module (exit)
loadi(22, 35);
loadi(23, 36);

// load the exception handler routine
loadi(2, 15);
loadi(3, 16);

// load the library code into the memory
loadi(63, 13);
loadi(64, 14);

// load the init program into the memory
loadi(65, 7);
loadi(66, 8);

// load scheduler
loadi(50,63);
loadi(51,64);

// Load Module 0 from disk pages 53 and 54 to memory pages 40 and 41.
// loadi(mem_page, disk_page)
loadi(40, 53);
loadi(41, 54);

// Load Module 4 from disk pages 61 and 62 to memory pages 48 and 49.
loadi(48, 61);
loadi(49, 62);

// Initialize the STATUS field in the Terminal Status table as 0.
// This will indicate that the terminal is free before scheduling the first process.
[TERMINAL_STATUS_TABLE] = 0;

// initialize all process table entries to TERMINATED
alias process_i R0;
process_i = -1;
while (process_i < MAX_PROC_NUM) do
	process_i = process_i + 1;
	[PROCESS_TABLE + 16*process_i + 4] = TERMINATED;
endwhile;

// 2. set the page table entries of the init process
PTBR = PAGE_TABLE_BASE + 20;
// make entry in the page table for library code
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// make entry in the page table for user process heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

// make entry in the page table for user process code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// make entry in the page table for user process stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

// set the PTLR to 10 as we have 20 entries in the page table
PTLR = 10;

// 3. set the process table for the init process
[PROCESS_TABLE + 16 + 1] = 1; // pid of the init process
[PROCESS_TABLE + 16 + 13] = 8 * 512; // logical page number of the user stack pointer
[PROCESS_TABLE + 16 + 12] = 0; // kernel stack pointer
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20; // physical address of the page table
[PROCESS_TABLE + 16 + 15] = 10; // value of PTLR
[PROCESS_TABLE + 16 + 11] = 80; // physical page number of the user area page

// 4. Mark the init process as created
[PROCESS_TABLE + 16 + 4] = CREATED; // state of the process

// 5. Transfer the entry point value from the header
[76 * 512] = [65 * 512 + 1]; // init process

// ---------------------- SET UP PROGRAM 2 ---------------------
// load the program 2 (that prints odd numbers) into the memory
loadi(83, 72);

// 2. set the page table entries of the init process
PTBR = PAGE_TABLE_BASE + 40;
// make entry in the page table for library code
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// make entry in the page table for user process heap
[PTBR+4] = 87;
[PTBR+5] = "0110";
[PTBR+6] = 86;
[PTBR+7] = "0110";

// make entry in the page table for user process code
[PTBR+8] = 83;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// make entry in the page table for user process stack
[PTBR+16] = 84;
[PTBR+17] = "0110";
[PTBR+18] = 85;
[PTBR+19] = "0110";

// 3. set the process table for the init process
[PROCESS_TABLE + 32 + 1] = 2; // pid
[PROCESS_TABLE + 32 + 13] = 8 * 512; // logical page number of the user stack pointer
[PROCESS_TABLE + 32 + 12] = 0; // kernel stack pointer
[PROCESS_TABLE + 32 + 14] = PAGE_TABLE_BASE + 40; // physical address of the page table
[PROCESS_TABLE + 32 + 15] = 10; // value of PTLR
[PROCESS_TABLE + 32 + 11] = 88; // physical page number of the user area page
[PROCESS_TABLE + 32 + 4] = CREATED; // state of the process

// 5. Transfer the entry point value from the header
[84 * 512] = [83 * 512 + 1];

// ----------------------- LOAD PRIMES PROGRAM -----------------------
// loadi(89,71);

// ----------------------- LOAD EVEN PROGRAM -----------------------
// loadi(89,70);

// ----------------------- LOAD ODD PROGRAM -----------------------
//loadi(89,72);
//
//PTBR = PAGE_TABLE_BASE + 60;
//PTLR = 10;
//
//// Library
//[PTBR+0] = 63;
//[PTBR+1] = "0100";
//[PTBR+2] = 64;
//[PTBR+3] = "0100";
//
////Heap
//[PTBR+4] = 90;
//[PTBR+5] = "0110";
//[PTBR+6] = 91;
//[PTBR+7] = "0110";
//
////Code
//[PTBR+8] = 89;
//[PTBR+9] = "0100";
//[PTBR+10] = -1;
//[PTBR+11] = "0000";
//[PTBR+12] = -1;
//[PTBR+13] = "0000";
//[PTBR+14] = -1;
//[PTBR+15] = "0000";
//
////Stack
//[PTBR+16] = 92;
//[PTBR+17] = "0110";
//[PTBR+18] = 93;
//[PTBR+19] = "0110";
//
//[PROCESS_TABLE + 48 + 1] = 3;
//[PROCESS_TABLE + 48 + 4] = CREATED;
//[PROCESS_TABLE + 48 + 11] = 94;
//[PROCESS_TABLE + 48 + 12] = 0;
//[PROCESS_TABLE + 48 + 13] = 8*512;
//[PROCESS_TABLE + 48 + 14] = PAGE_TABLE_BASE + 60;
//[PROCESS_TABLE + 48 + 15] = 10;
//
//[92*512] = [89 * 512 + 1];
//
// 6. return to the os startup code
return;
