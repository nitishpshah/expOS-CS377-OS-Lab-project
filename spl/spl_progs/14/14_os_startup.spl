// 1. load the module 7
loadi(54,67);
loadi(55,68);
// load the idle program into the memory
loadi(69,11);
loadi(70,12);

// 2. set the stack pointer to the user page area of the idle process
SP = 82 * 512 - 1;

// 3. call the boot module
call BOOT_MODULE;

// 4. set the page table entries for the idle process
PTBR = PAGE_TABLE_BASE;
PTLR = 10;
// library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

// code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

// 5. set the process table for the idle process
[PROCESS_TABLE + 1] = 0; // pid of the idle process
[PROCESS_TABLE + 13] = 8 * 512; // logical page number of the user stack pointer
[PROCESS_TABLE + 14] = PAGE_TABLE_BASE; // physical address of the page table
[PROCESS_TABLE + 15] = 10; // value of LTBR
[PROCESS_TABLE + 11] = 82; // physical page number of the user area page

// 6. set the state as running and current pid as 0
[PROCESS_TABLE + 4] = RUNNING; // state of the process
[SYSTEM_STATUS_TABLE + 1] = 0;

// 7. transfer the entry point value from the header
[81 * 512] = [69 * 512 + 1]; // idle process

// 8. set the SP to the logical address of the user stack
SP = 8 * 512;

// 9. swith to the user mode using ireturn

ireturn;
