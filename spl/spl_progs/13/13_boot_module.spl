// 1. load all the required interrupts, exception handler, expOS library and the init process
// load the timer routine into the memory
loadi(4, 17);
loadi(5, 18);

// load the int7 routine into memory
loadi(16,29);
loadi(17,30);

// load the int10 module (exit)
loadi(22,35);
loadi(23,36);

// load the exception handler routine
loadi(2, 15);
loadi(3, 16);

// load the library code into the memory
loadi(63,13);
loadi(64,14);

// load the init program into the memory
loadi(65,7);
loadi(66,8);


// 2. set the page table entries of the init process
PTBR = PAGE_TABLE_BASE + 20;
// make entry in the page table for library code
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// make entry in the page table for user process heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

// make entry in the page table for user process code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// make entry in the page table for user process stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

// set the PTLR to 10 as we have 20 entries in the page table
PTLR = 10;


// 3. set the process table for the init process
[PROCESS_TABLE + 16 + 1] = 1; // pid of the init process
[PROCESS_TABLE + 16 + 13] = 8 * 512; // logical page number of the user stack pointer
[PROCESS_TABLE + 16 + 12] = 0; // kernel stack pointer
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20; // physical address of the page table
[PROCESS_TABLE + 16 + 15] = 10; // value of PTLR
[PROCESS_TABLE + 16 + 11] = 80; // physical page number of the user area page


// 4. Mark the init process as created
[PROCESS_TABLE + 16 + 4] = CREATED; // state of the process


// 5. Transfer the entry point value from the header
[76 * 512] = [65 * 512 + 1]; // init process


// 6. return to the os startup code
return;
